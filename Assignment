Quesn 1.
sort(arr.begin(),arr.end());
int sum=0;
for(int i=0;i<nums.size();i+=2) sum+=nums[i];
return sum;

Quesn 2.
set<int> st;
for(int i=0;i<arr.size();i++){
  if(st.size()==arr.size()/2) break;
 st.insert(arr[i]);
}
return st.size();

Quesn 3. 
sort(nums.begin(), nums.end());
int i = 0;
int left = 0;
int right = 0;
int ans = 0;
int maxAns = 0;
while(right < nums.size()){
  if(nums[right]-nums[left] == 1){
      ans = right-left+1;
      maxAns = max(maxAns, ans);
  }else if(nums[right]-nums[left] > 1){
      while(nums[right]-nums[left] > 1){
      left++;
}
}
right++;
}
return maxAns;

Quesn 4.
bool canPlaceFlowers(vector<int>& flowerbed, int n) {
int ans=0;
for(int i=0;i<flowerbed.size();i++){
if(flowerbed[i]==0){
bool left= (i==0) || (flowerbed[i-1]==0) ;
bool right=(i==flowerbed.size()-1) || (flowerbed[i+1]==0);
if(left && right){
    flowerbed[i]=1;
    ans++;
    if(ans>=n) return true;
    }
}
}
return ans==n;
}

Quesn 5.
int maximumProduct(vector<int>& nums) {
sort(nums.begin(),nums.end());
int j=nums.size()-1,k=3,prod=1,d=nums[j];
while(k--){
prod*=nums[j--];
}
if(nums[0]<0 && nums[1]<0 && nums[nums.size()-1]>0){
d*=nums[0];
d*=nums[1];
return max(prod,d);
}
return prod;
}


Quesn 6.
int h=nums.size()-1,l=0;
while(l<=h){
  int m=l+(h-l)/2;
  if(nums[m]==target) return m;
  else if(nums[m]>target) h=m-1;
  else l=m+1;
}
return -1;

Quesn 7.
bool inc(vector<int> &nums, int n){
for(int i=0;i<n;i++){
if(nums[i]<=nums[i+1]){
continue;
}
else{
return false;
}
}
return true;
}
bool dec(vector<int> &nums, int n){
for(int i=0;i<n;i++){
if(nums[i]>=nums[i+1]){
continue;
}
else{
return false;
}
}
return true;
}
bool isMonotonic(vector<int>& nums) {
int n = nums.size()-1;
if(n==1 || n==0) return true;        
bool in = inc(nums,n);
bool dc = dec(nums,n);
return (in || dc);
}

Quesn 8.
int n=nums.size();
if(n==1)            return 0;
int m1=INT_MAX;
int m2=INT_MIN;
for(int i=0;i<n;i++){
if(nums[i]<m1) m1=nums[i];
if(nums[i]>m2) m2=nums[i];
}
int t=m2-m1;
if(t<2*k) return 0;
else return t-2*k;
        
